/*
login("admin","123456")
def create_case_file1(out_dir = NULL){
	if(isNull(out_dir)){
		case_dir = getHomeDir()
	}else{
		case_dir = out_dir
	}
	if(getNodeType() == 3){
		marketHoliday_path = getHomeDir()+"/marketHoliday"
	}else{
		path_list=getHomeDir().split("/")
		marketHoliday_path = concat("/"+path_list[1:(size(path_list)-2)])+"/marketHoliday"
	}

	all_files = files(marketHoliday_path)["filename"].split(".")[0].sort!()
	a = "
@testing:case = \"test_marketHoliday_vvvvvv\"
market_name = \"vvvvvv\"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.02)
"
	re1 = ""
	for(name in all_files){
		re1 = re1+a.strReplace("vvvvvv",name)	
	}
	test_case_file1 = file(case_dir+"/test_use_marketHoliday.txt","w")
	test_case_file1 .writeLine(re1)
	test_case_file1.close()
	return case_dir+"/test_use_marketHoliday.txt"
}
def create_case_file2(out_dir = NULL){
	if(isNull(out_dir)){
		case_dir = getHomeDir()
	}else{
		case_dir = out_dir
	}
	if(getNodeType() == 3){
		marketHoliday_path = getHomeDir()+"/marketHoliday"
	}else{
		path_list=getHomeDir().split("/")
		marketHoliday_path = concat("/"+path_list[1:(size(path_list)-2)])+"/marketHoliday"
	}

	all_files = files(marketHoliday_path)["filename"].split(".")[0].sort!()
	a = "
@testing:case = \"test_getMarketCalendar_vvvvvv\"
getMarketCalendar(\"vvvvvv\")
"
	re1 = ""
	for(name in all_files){
		re1 = re1+a.strReplace("vvvvvv",name)	
	}
	test_case_file1 = file(case_dir+"/test_get_marketHoliday.txt","w")
	test_case_file1 .writeLine(re1)
	test_case_file1.close()
	return case_dir+"/test_get_marketHoliday.txt"
}
*/

@testing:case = "test_marketHoliday_AIXK"
market_name = "AIXK"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.03)

@testing:case = "test_marketHoliday_ASEX"
market_name = "ASEX"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.02)

@testing:case = "test_marketHoliday_BVMF"
market_name = "BVMF"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.02)

@testing:case = "test_marketHoliday_CFFEX"
market_name = "CFFEX"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.03)

@testing:case = "test_marketHoliday_CMES"
market_name = "CMES"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.03)

@testing:case = "test_marketHoliday_CZCE"
market_name = "CZCE"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.03)

@testing:case = "test_marketHoliday_DCE"
market_name = "DCE"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.03)

@testing:case = "test_marketHoliday_IEPA"
market_name = "IEPA"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.03)

@testing:case = "test_marketHoliday_SHFE"
market_name = "SHFE"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.03)

@testing:case = "test_marketHoliday_INE"
market_name = "INE"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.03)

@testing:case = "test_marketHoliday_SSE"
market_name = "SSE"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.03)

@testing:case = "test_marketHoliday_SZSE"
market_name = "SZSE"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.03)

@testing:case = "test_marketHoliday_XAMS"
market_name = "XAMS"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.02)

@testing:case = "test_marketHoliday_XASX"
market_name = "XASX"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.03)

@testing:case = "test_marketHoliday_XBKK"
market_name = "XBKK"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.03)

@testing:case = "test_marketHoliday_XBOG"
market_name = "XBOG"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.02)

@testing:case = "test_marketHoliday_XBOM"
market_name = "XBOM"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.02)

@testing:case = "test_marketHoliday_XBRU"
market_name = "XBRU"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.02)

@testing:case = "test_marketHoliday_XBSE"
market_name = "XBSE"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.03)

@testing:case = "test_marketHoliday_XBUD"
market_name = "XBUD"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.02)

@testing:case = "test_marketHoliday_XBUE"
market_name = "XBUE"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.02)

@testing:case = "test_marketHoliday_XCBF"
market_name = "XCBF"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.03)

@testing:case = "test_marketHoliday_XCSE"
market_name = "XCSE"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.02)

@testing:case = "test_marketHoliday_XDUB"
market_name = "XDUB"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.03)

@testing:case = "test_marketHoliday_XETR"
market_name = "XETR"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.02)

@testing:case = "test_marketHoliday_XFRA"
market_name = "XFRA"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.02)

@testing:case = "test_marketHoliday_XHEL"
market_name = "XHEL"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.02)

@testing:case = "test_marketHoliday_XHKG"
market_name = "XHKG"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.03)

@testing:case = "test_marketHoliday_XICE"
market_name = "XICE"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.02)

@testing:case = "test_marketHoliday_XIDX"
market_name = "XIDX"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.02)

@testing:case = "test_marketHoliday_XIST"
market_name = "XIST"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.02)

@testing:case = "test_marketHoliday_XJSE"
market_name = "XJSE"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.03)

@testing:case = "test_marketHoliday_XKAR"
market_name = "XKAR"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.02)

@testing:case = "test_marketHoliday_XKLS"
market_name = "XKLS"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.03)

@testing:case = "test_marketHoliday_XKRX"
market_name = "XKRX"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.02)

@testing:case = "test_marketHoliday_XLIM"
market_name = "XLIM"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.02)

@testing:case = "test_marketHoliday_XLIS"
market_name = "XLIS"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.02)

@testing:case = "test_marketHoliday_XLON"
market_name = "XLON"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.03)

@testing:case = "test_marketHoliday_XMAD"
market_name = "XMAD"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.02)

@testing:case = "test_marketHoliday_XMEX"
market_name = "XMEX"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.02)

@testing:case = "test_marketHoliday_XMIL"
market_name = "XMIL"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.02)

@testing:case = "test_marketHoliday_XMOS"
market_name = "XMOS"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.03)

@testing:case = "test_marketHoliday_XNYS"
market_name = "XNYS"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.03)

@testing:case = "test_marketHoliday_XNZE"
market_name = "XNZE"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.04)

@testing:case = "test_marketHoliday_XOSL"
market_name = "XOSL"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.02)

@testing:case = "test_marketHoliday_XPAR"
market_name = "XPAR"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.02)

@testing:case = "test_marketHoliday_XPHS"
market_name = "XPHS"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.03)

@testing:case = "test_marketHoliday_XPRA"
market_name = "XPRA"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.02)

@testing:case = "test_marketHoliday_XSES"
market_name = "XSES"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.02)

@testing:case = "test_marketHoliday_XSGO"
market_name = "XSGO"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.02)

@testing:case = "test_marketHoliday_XSHG"
market_name = "XSHG"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.03)

@testing:case = "test_marketHoliday_XSTO"
market_name = "XSTO"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.02)

@testing:case = "test_marketHoliday_XSWX"
market_name = "XSWX"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.03)

//@testing:case = "test_marketHoliday_XTAE"
//market_name = "XTAE"
//s = 2022.12.31
//re = s.temporalAdd(1,market_name)
//assert 1,eqObj(re,2023.01.02)

@testing:case = "test_marketHoliday_XTAI"
market_name = "XTAI"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.03)

@testing:case = "test_marketHoliday_XTKS"
market_name = "XTKS"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.04)

@testing:case = "test_marketHoliday_XTSE"
market_name = "XTSE"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.03)

@testing:case = "test_marketHoliday_XWAR"
market_name = "XWAR"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.02)

@testing:case = "test_marketHoliday_XWBO"
market_name = "XWBO"
s = 2022.12.31
re = s.temporalAdd(1,market_name)
assert 1,eqObj(re,2023.01.02)


//AIXK最新holiday数据剔除了2022.12.01
@testing:case = "test_getMarketCalendar_AIXK"
te = getMarketCalendar("AIXK")
assert 1, eq(te[0], 2017.01.02)
s = 2022.12.01
assert 2, s in te


//ASEX 2022年holiday新增2022.06.13、2022.05.02、2022.05.02、2022.03.07
//ASEX 2023年holiday新增2023.02.27、2023.04.17、2023.04.14、2023.06.05
@testing:case = "test_getMarketCalendar_ASEX"
te = getMarketCalendar("ASEX")
assert 1, eq(te[0], 2004.01.02)
s = [2022.06.13, 2022.05.02, 2022.05.02, 2022.03.07, 2023.02.27, 2023.04.17, 2023.04.14, 2023.06.05]
assert 2, eq(false in (s not in te), false)

@testing:case = "test_getMarketCalendar_BVMF"
te = getMarketCalendar("BVMF")
assert 1, eq(te[0], 2004.01.02)

@testing:case = "test_getMarketCalendar_CFFEX"
te = getMarketCalendar("CFFEX")
assert 1, eq(te[0], 2006.01.02)
// getMarketCalendar("CCFX")


@testing:case = "test_getMarketCalendar_CMES"
te = getMarketCalendar("CMES")
assert 1, eq(te[0], 2004.01.02)

@testing:case = "test_getMarketCalendar_CZCE"
te = getMarketCalendar("CMES")
assert 1, eq(te[0], 2004.01.02)
// getMarketCalendar("XZCE")

//需要修改
@testing:case = "test_getMarketCalendar_DCE"
te = getMarketCalendar("DCE")
assert 1, eq(te[0], 1994.01.03)
// getMarketCalendar("XDCE")

//IEPA最新holiday数据剔除2023-04-07（Currency, Stock, SOFR and Mortgage Index显示为open）
@testing:case = "test_getMarketCalendar_IEPA"
te = getMarketCalendar("IEPA")
assert 1, eq(te[0], 2004.01.02)
s = 2023.04.07
assert 2, s in te

//需要修改
@testing:case = "test_getMarketCalendar_SHFE"
te = getMarketCalendar("SHFE")
assert 1, eq(te[0], 1992.01.02)
// getMarketCalendar("XSGE")

@testing:case = "test_getMarketCalendar_INE"
te = getMarketCalendar("INE")
assert 1, eq(te[0], 2017.01.02)
// getMarketCalendar("XINE")

@testing:case = "test_getMarketCalendar_SSE"
te = getMarketCalendar("SSE")
assert 1, eq(te[0], 1991.01.02)

// @testing:case = "test_getMarketCalendar_SSE&XSHG"
// te1 = getMarketCalendar("SSE")
// te2 = getMarketCalendar("XSHG")
// assert 1, eqObj(te1, te2)

//需要修改
@testing:case = "test_getMarketCalendar_SZSE&XSHE"
te = getMarketCalendar("SZSE")
assert 1, eq(te[0], 1992.01.02)

// @testing:case = "test_getMarketCalendar_SZSE&XSHE"
// te1 = getMarketCalendar("SZSE")
// te2 = getMarketCalendar("XSHE")
// assert 1, eqObj(te1, te2)

@testing:case = "test_getMarketCalendar_XAMS"
te = getMarketCalendar("XAMS")
assert 1, eqObj(te[0], 2004.01.02)

@testing:case = "test_getMarketCalendar_XASX"
te = getMarketCalendar("XASX")
assert 1, eqObj(te[0], 2004.01.02)

//XBKK Holiday 2023年新增2023.03.06、2023.05.05、2023.08.01，2023年剔除2023.01.03，
//XBKK Holiday 2022年新增2022.12.11、2022.10.14、2022.07.29、2022.07.13、2022.06.05、2022.05.05、2022.05.01、2022.02.16、2022.01.02，
//XBKK Holiday 2022年剔除2022.01.03、2022.05.02、2022.12.12
@testing:case = "test_getMarketCalendar_XBKK"
te = getMarketCalendar("XBKK")
assert 1, eqObj(te[0], 2004.01.05)
s = [2023.03.06, 2023.05.05, 2023.08.01, 2022.12.11, 2022.10.14, 2022.07.29, 2022.07.13, 2022.06.05, 2022.05.05, 2022.05.01, 2022.02.16, 2022.01.02]
s1 = [2023.01.03, 2022.01.03, 2022.05.02, 2022.12.12]
x = (s1 in te).append!(s not in te)
assert 2, eqObj(x, take(true, x.size()))

//XBOG Holiday剔除2023.12.29
@testing:case = "test_getMarketCalendar_XBOG"
te = getMarketCalendar("XBOG")
assert 1, eqObj(te[0], 2004.01.02)
s = 2023.12.29
assert 2, s in te

//XBOM新增2023年Holiday
@testing:case = "test_getMarketCalendar_XBOM"
te = getMarketCalendar("XBOM")
assert 1, eqObj(te[0], 2004.01.02)
s = [2023.12.25,2023.11.27,2023.11.14,2023.10.24,2023.10.02,2023.09.19,2023.08.15,2023.06.28,2023.05.01,2023.04.14,2023.04.07,2023.04.04,2023.03.30,2023.03.07,2023.01.26]
assert 2, eq(true in (s in te), false)

@testing:case = "test_getMarketCalendar_XBRU"
te = getMarketCalendar("XBRU")
assert 1, eqObj(te[0], 2004.01.02)

//XBSE 2023年Holiday新增2023.04.17、2023.04.14、2023.06.05
//XBSE 2022年Holiday新增2022.04.25、2022.04.22、2022.06.13
@testing:case = "test_getMarketCalendar_XBSE"
te = getMarketCalendar("XBSE")
assert 1, eqObj(te[0], 2004.01.05)
s = [2023.04.17,2023.04.14,2023.06.05,2022.04.25,2022.04.22,2022.06.13]
assert 2, eq(true in (s in te), false)

@testing:case = "test_getMarketCalendar_XBUD"
te = getMarketCalendar("XBUD")
assert 1, eqObj(te[0], 2004.01.05)

//2022年数据新增2022.12.09
//2023年数据新增2023.06.19、2023.05.26、2023.10.13、2023.11.08、2023.10.20
@testing:case = "test_getMarketCalendar_XBUE"
te = getMarketCalendar("XBUE")
assert 1, eqObj(te[0], 2004.01.02)
s = [2022.12.09,2023.06.19,2023.05.26,2023.10.13,2023.11.08,2023.10.20]
assert 2, eq(true in (s in te), false)

@testing:case = "test_getMarketCalendar_XCBF"
te = getMarketCalendar("XCBF")
assert 1, eqObj(te[0], 2004.01.02)

@testing:case = "test_getMarketCalendar_XCSE"
te = getMarketCalendar("XCSE")
assert 1, eqObj(te[0], 2004.01.02)

@testing:case = "test_getMarketCalendar_XDUB"
te = getMarketCalendar("XDUB")
assert 1, eqObj(te[0], 2004.01.02)


@testing:case = "test_getMarketCalendar_XETR"
te = getMarketCalendar("XETR")
assert 1, eqObj(te[0], 2004.01.02)

@testing:case = "test_getMarketCalendar_XFRA"
te = getMarketCalendar("XFRA")
assert 1, eqObj(te[0], 2004.01.02)

@testing:case = "test_getMarketCalendar_XHEL"
te = getMarketCalendar("XHEL")
assert 1, eqObj(te[0], 2004.01.02)

@testing:case = "test_getMarketCalendar_XHKG"
te = getMarketCalendar("XHKG")
assert 1, eqObj(te[0], 2004.01.02)

@testing:case = "test_getMarketCalendar_XICE"
te = getMarketCalendar("XICE")
assert 1, eqObj(te[0], 2004.01.02)


//XIDX Holiday2023年数据新增2023.12.26、2023.09.28、2023.07.19、2023.06.29、2023.06.02、2023.04.26、2023.04.25、2023.04.24、2023.04.21、2023.03.23、2023.03.22、2023.01.23
//XIDX Holiday2022年数据新增2022.03.03、2022.02.28、2023.05.02、2023.05.03、2023.05.16
@testing:case = "test_getMarketCalendar_XIDX"
te = getMarketCalendar("XIDX")
assert 1, eqObj(te[0], 2004.01.02)
s = [2023.12.26,2023.09.28,2023.07.19,2023.06.29,2023.06.02,2023.04.26,2023.04.25,2023.04.24,2023.04.21,2023.03.23,2023.03.22,2023.01.23,2022.03.03,2022.02.28,2023.05.02,2023.05.03,2023.05.16]
assert 2, eq(true in (s in te), false)

@testing:case = "test_getMarketCalendar_XIST"
te = getMarketCalendar("XIST")
assert 1, eqObj(te[0], 2004.01.02)

//需修改
@testing:case = "test_getMarketCalendar_XJSE"
te = getMarketCalendar("XJSE")
assert 1, eqObj(te[0], 2004.01.02)

//XKAR Holiday 2023年新增2023.04.21、2023.11.09
//XKAR Holiday 2022年新增2022-12-26
@testing:case = "test_getMarketCalendar_XKAR"
te = getMarketCalendar("XKAR")
assert 1, eqObj(te[0], 2004.01.02)
s = [2023.04.21,2023.11.09, 2022.12.26]
assert 2, eq(true in (s in te), false)


//XKLS Holiday 2023年数据剔除2023.04.21、2023.06.28、2023.09.27，
//XKLS Holiday 2022年新增2022.02.06、2023.06.29、2023.09.28、2023.11.13
@testing:case = "test_getMarketCalendar_XKLS"
te = getMarketCalendar("XKLS")
assert 1, eqObj(te[0], 2004.01.02)
s = [2022.02.06,2023.06.29,2023.09.28,2023.11.13]
s1 = [2023.04.21,2023.06.28,2023.09.27]
x = (s1 in te).append!(s not in te)
assert 2, eqObj(x, take(true, x.size()))

//需修改
@testing:case = "test_getMarketCalendar_XKRX"
te = getMarketCalendar("XKRX")
assert 1, eqObj(te[0], 2004.01.02)

@testing:case = "test_getMarketCalendar_XLIM"
te = getMarketCalendar("XLIM")
assert 1, eqObj(te[0], 2004.01.02)

@testing:case = "test_getMarketCalendar_XLIS"
te = getMarketCalendar("XLIS")
assert 1, eqObj(te[0], 2004.01.02)

//需要修改,新增2023.05.08
@testing:case = "test_getMarketCalendar_XLON"
te = getMarketCalendar("XLON")
assert 1, eqObj(te[0], 2004.01.02)
s = 2023.05.08
assert 2, s not in te

@testing:case = "test_getMarketCalendar_XMAD"
te = getMarketCalendar("XMAD")
assert 1, eqObj(te[0], 2004.01.02)

@testing:case = "test_getMarketCalendar_XMEX"
te =  getMarketCalendar("XMEX")
assert 1, eqObj(te[0], 2004.01.02)

@testing:case = "test_getMarketCalendar_XMIL"
te = getMarketCalendar("XMIL")
assert 1, eqObj(te[0], 2004.01.02)

//XMOS Holiday 2023年数据剔除2023.01.09、2023.11.06
//XMOS Holiday 2022年数据剔除2022.01.03、2022.06.13
@testing:case = "test_getMarketCalendar_XMOS"
te = getMarketCalendar("XMOS")
assert 1, eqObj(te[0], 2004.01.05)
s = [2023.01.09,2023.11.06,2022.01.03,2022.06.13]
assert 2, eq(false in (s in te), false)

//需要修改
@testing:case = "test_getMarketCalendar_XNYS"
te = getMarketCalendar("XNYS")
assert 1, eqObj(te[0], 2004.01.02)

@testing:case = "test_getMarketCalendar_XNZE"
te = getMarketCalendar("XNZE")
assert 1, eqObj(te[0], 2004.01.05)

//需要修改
@testing:case = "test_getMarketCalendar_XOSL"
te = getMarketCalendar("XOSL")
assert 1, eqObj(te[0], 2004.01.02)


@testing:case = "test_getMarketCalendar_XPAR"
getMarketCalendar("XPAR")

//XPHS Holidday 2022年数据新增2022.12.08
//XPHS Holiday 2023年数据新增2023.01.02、2023.04.10、2023.11.02、2023.11.27、2023.12.08
@testing:case = "test_getMarketCalendar_XPHS"
te = getMarketCalendar("XPHS")
s = [2022.12.08,2023.01.02,2023.04.10,2023.11.02,2023.11.27,2023.12.08]
assert 1, eq(true in (s in te), false)

@testing:case = "test_getMarketCalendar_XPRA"
te = getMarketCalendar("XPRA")
assert 1, eqObj(te[0], 2004.01.05)


//XSES新增2023年holidays数据2023.12.25、2023.11.13、2023.08.09、2023.06.29、2023.06.02、2023.05.01、2023.04.07、2023.01.24、2023.01.23
@testing:case = "test_getMarketCalendar_XSES"
te = getMarketCalendar("XSES")
s = [2023.12.25,2023.11.13,2023.08.09,2023.06.29,2023.06.02,2023.05.01,2023.04.07,2023.01.24,2023.01.23]
assert 1, eq(true in (s in te), false)

@testing:case = "test_getMarketCalendar_XSGO"
te = getMarketCalendar("XSGO")
assert 1, eqObj(te[0], 2004.01.02)


@testing:case = "test_getMarketCalendar_XSHG"
te = getMarketCalendar("XSHG")
assert 1, eqObj(te[0], 1991.01.02)


@testing:case = "test_getMarketCalendar_XSTO"
te = getMarketCalendar("XSTO")
assert 1, eqObj(te[0], 2004.01.02)

@testing:case = "test_getMarketCalendar_XSWX"
te = getMarketCalendar("XSWX")
assert 1, eqObj(te[0], 2004.01.05)


//剔除以色列的数据
//@testing:case = "test_getMarketCalendar_XTAE"
//getMarketCalendar("XTAE")

@testing:case = "test_getMarketCalendar_XTAI"
te = getMarketCalendar("XTAI")
assert 1, eqObj(te[0], 2004.01.02)


//XTKS Holiday新增2023.03.21
@testing:case = "test_getMarketCalendar_XTKS"
te = getMarketCalendar("XTKS")
assert 1, eqObj(te[0], 2004.01.05)
s = 2023.03.21
assert 2, s not in te

@testing:case = "test_getMarketCalendar_XTSE"
te = getMarketCalendar("XTSE")
assert 1, eqObj(te[0], 2004.01.02)


@testing:case = "test_getMarketCalendar_XWAR"
te = getMarketCalendar("XWAR")
assert 1, eqObj(te[0], 2004.01.02)


//XWBO 2023年数据剔除2023.05.29
@testing:case = "test_getMarketCalendar_XWBO"
te = getMarketCalendar("XWBO")
assert 1, eqObj(te[0], 2004.01.02)
s = 2023.05.02
assert 2, s in te