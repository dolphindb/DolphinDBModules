login("admin", "123456")
/** set your nsq plugin and nsq sdk config file path here **/ 
pluginPath = "/home/appadmin/mqzhu/v2.00.9.6/server/plugins/nsq/PluginNsq.txt"
configFilePath = "/home/appadmin/mqzhu/v2.00.9.6/server/plugins/nsq/nsq_sdk_config.ini";


try { 
    loadPlugin("plugins/nsq/PluginNsq.txt") 
} catch(ex) { 
    print(ex) 
    try{ loadPlugin(pluginPath) } catch(ex) { print(ex) }
}
use DolphinDBModules::easyNSQ


def checkNsqSubscription(dataType, market) {
    if(dataType in [`snapshot, `trade, `orders]) {
        if(market in [`sh, `sz]) {
            return exec isSubscribed from nsq::getSubscriptionStatus() where topicType = stringFormat("(%W, %W)", dataType, market);
        }
    }
    return false
}

def existsSharedAndPersistStreamTable(tbName) {
    names = exec name from objs(true) where form="TABLE" and type="REALTIME" and shared=true
    
    if(names.find(tbName) >= 0) {
        persistTableList = (exec tables from getStreamingStat().persistWorkers).concat(',').split(',').trim()
        if(in(tbName, persistTableList)) {
            return true
        }
    }
    return false
}

def isSubscribedByDfs(streamTableName) {
    return existsSubscriptionTopic(,streamTableName, "easyNSQ_saveToDfsTable")
}

// 单独订阅上交所逐笔委托行情数据测试
@testing:case="function_subscribeNsq_orders_sh_defaultName"
    iniNsqEnv()
    streamTableNames = subscribeNsq(configFilePath, "orders", "sh")
    assert 1, eqObj(streamTableNames, ["nsqStockOrdersSHStream"])
    assert 2, existsSharedAndPersistStreamTable("nsqStockOrdersSHStream")
    assert 3, checkNsqSubscription("orders", "sh")
    
    nsq::unsubscribe("orders", "sh")
    assert 4, checkNsqSubscription("orders", "sh")==false
    iniNsqEnv()
    assert 5, existsSharedAndPersistStreamTable("nsqStockOrdersSHStream")==false


@testing:case="function_subscribeNsq_orders_sh_givenName"
    iniNsqEnv("myNsqOrdersSHStream")
    streamTableNames = subscribeNsq(configFilePath, "orders", "sh", streamTableNames="myNsqOrdersSHStream")
    assert 1, checkNsqSubscription("orders", "sh")
    assert 2, eqObj(streamTableNames, ["myNsqOrdersSHStream"])
    assert 3, existsSharedAndPersistStreamTable("myNsqOrdersSHStream")==true
    
    nsq::unsubscribe("orders", "sh")
    assert 4, checkNsqSubscription("orders", "sh")==false
    iniNsqEnv("myNsqOrdersSHStream")
    assert 5, existsSharedAndPersistStreamTable("myNsqOrdersSHStream")==false

    
@testing:case="function_subscribeNsq_orders_sh_saveDFS_defaultName"
    iniNsqEnv()
    iniNsqDfs()
    streamTableNames, dbPath, tableNames = subscribeNsq(configFilePath, "orders", "sh", saveToDfs=true)
    assert 1, eqObj(streamTableNames, ["nsqStockOrdersSHStream"])
    assert 2, eqObj(dbPath, "dfs://nsqStockOrders")
    assert 3, eqObj(tableNames, ["ordersSH"])
    assert 4, existsSharedAndPersistStreamTable("nsqStockOrdersSHStream")
    assert 5, existsTable("dfs://nsqStockOrders", "ordersSH")
    assert 6, checkNsqSubscription("orders", "sh")
    assert 7, isSubscribedByDfs("nsqStockOrdersSHStream")
    
    nsq::unsubscribe("orders", "sh")
    assert 8, checkNsqSubscription("orders", "sh")==false
    iniNsqEnv()
    assert 9, existsSharedAndPersistStreamTable("nsqStockOrdersSHStream")==false
    iniNsqDfs()
    assert 10, existsTable("dfs://nsqStockOrders", "ordersSH")==false
    

@testing:case="function_subscribeNsq_orders_sh_saveDFS_givenName"
    iniNsqEnv()
    iniNsqDfs("dfs://myNsqOrders", "myNsqOrdersSH")
    streamTableNames, dbPath, tableNames = subscribeNsq(configFilePath, "orders", "sh", saveToDfs=true, dbPath="dfs://myNsqOrders", tableNames="myNsqOrdersSH")
    assert 1, eqObj(streamTableNames, ["nsqStockOrdersSHStream"])
    assert 2, eqObj(dbPath, "dfs://myNsqOrders")
    assert 3, eqObj(tableNames, ["myNsqOrdersSH"])
    assert 4, existsSharedAndPersistStreamTable("nsqStockOrdersSHStream")
    assert 5, existsTable("dfs://myNsqOrders", "myNsqOrdersSH")
    assert 6, checkNsqSubscription("orders", "sh")
    assert 7, isSubscribedByDfs("nsqStockOrdersSHStream")
    
    nsq::unsubscribe("orders", "sh")
    assert 8, checkNsqSubscription("orders", "sh")==false
    iniNsqEnv()
    assert 9, existsSharedAndPersistStreamTable("nsqStockOrdersSHStream")==false
    iniNsqDfs("dfs://myNsqOrders", "myNsqOrdersSH")
    assert 10, existsTable("dfs://myNsqOrders", "myNsqOrdersSH")==false


// 单独订阅深交所逐笔委托行情数据测试
@testing:case="function_subscribeNsq_orders_sz_defaultName"
    iniNsqEnv()
    streamTableNames = subscribeNsq(configFilePath, "orders", "sz")
    assert 1, eqObj(streamTableNames, ["nsqStockOrdersSZStream"])
    assert 2, existsSharedAndPersistStreamTable("nsqStockOrdersSZStream")
    assert 3, checkNsqSubscription("orders", "sz")
    
    nsq::unsubscribe("orders", "sz")
    assert 4, checkNsqSubscription("orders", "sz")==false
    iniNsqEnv()
    assert 5, existsSharedAndPersistStreamTable("nsqStockOrdersSZStream")==false


@testing:case="function_subscribeNsq_orders_sz_givenName"
    iniNsqEnv("myNsqOrdersSZStream")
    streamTableNames = subscribeNsq(configFilePath, "orders", "sz", streamTableNames="myNsqOrdersSZStream")
    assert 1, checkNsqSubscription("orders", "sz")
    assert 2, eqObj(streamTableNames, ["myNsqOrdersSZStream"])
    assert 3, existsSharedAndPersistStreamTable("myNsqOrdersSZStream")==true
    
    nsq::unsubscribe("orders", "sz")
    assert 4, checkNsqSubscription("orders", "sz")==false
    iniNsqEnv("myNsqOrdersSZStream")
    assert 5, existsSharedAndPersistStreamTable("myNsqOrdersSZStream")==false

    
@testing:case="function_subscribeNsq_orders_sz_saveDFS_defaultName"
    iniNsqEnv()
    iniNsqDfs()
    streamTableNames, dbPath, tableNames = subscribeNsq(configFilePath, "orders", "sz", saveToDfs=true)
    assert 1, eqObj(streamTableNames, ["nsqStockOrdersSZStream"])
    assert 2, eqObj(dbPath, "dfs://nsqStockOrders")
    assert 3, eqObj(tableNames, ["ordersSZ"])
    assert 4, existsSharedAndPersistStreamTable("nsqStockOrdersSZStream")
    assert 5, existsTable("dfs://nsqStockOrders", "ordersSZ")
    assert 6, checkNsqSubscription("orders", "sz")
    assert 7, isSubscribedByDfs("nsqStockOrdersSZStream")
    
    nsq::unsubscribe("orders", "sz")
    assert 8, checkNsqSubscription("orders", "sz")==false
    iniNsqEnv()
    assert 9, existsSharedAndPersistStreamTable("nsqStockOrdersSZStream")==false
    iniNsqDfs()
    assert 10, existsTable("dfs://nsqStockOrders", "ordersSZ")==false
    

@testing:case="function_subscribeNsq_orders_sz_saveDFS_givenName"
    iniNsqEnv()
    iniNsqDfs("dfs://myNsqOrders", "myNsqOrdersSZ")
    streamTableNames, dbPath, tableNames = subscribeNsq(configFilePath, "orders", "sz", saveToDfs=true, dbPath="dfs://myNsqOrders", tableNames="myNsqOrdersSZ")
    assert 1, eqObj(streamTableNames, ["nsqStockOrdersSZStream"])
    assert 2, eqObj(dbPath, "dfs://myNsqOrders")
    assert 3, eqObj(tableNames, ["myNsqOrdersSZ"])
    assert 4, existsSharedAndPersistStreamTable("nsqStockOrdersSZStream")
    assert 5, existsTable("dfs://myNsqOrders", "myNsqOrdersSZ")
    assert 6, checkNsqSubscription("orders", "sz")
    assert 7, isSubscribedByDfs("nsqStockOrdersSZStream")
    
    nsq::unsubscribe("orders", "sz")
    assert 8, checkNsqSubscription("orders", "sz")==false
    iniNsqEnv()
    assert 9, existsSharedAndPersistStreamTable("nsqStockOrdersSZStream")==false
    iniNsqDfs("dfs://myNsqOrders", "myNsqOrdersSZ")
    assert 10, existsTable("dfs://myNsqOrders", "myNsqOrdersSZ")==false

    

// 同时订阅上交所和深交所逐笔委托行情数据测试（分开存储）
@testing:case="function_subscribeNsq_orders_shsz_defaultName"
    iniNsqEnv()
    streamTableNames = subscribeNsq(configFilePath, "orders", ["sh","sz"])
    assert 1, eqObj(streamTableNames, ["nsqStockOrdersSHStream", "nsqStockOrdersSZStream"])
    assert 2, all(existsSharedAndPersistStreamTable, ["nsqStockOrdersSHStream", "nsqStockOrdersSZStream"])
    assert 3, all(checkNsqSubscription{"orders"},["sh", "sz"])
    
    nsq::unsubscribe("orders", "sh")
    nsq::unsubscribe("orders", "sz")
    assert 3, any(checkNsqSubscription{"orders"},["sh", "sz"])==false
    iniNsqEnv()
    assert 4, any(existsSharedAndPersistStreamTable, ["nsqStockOrdersSHStream", "nsqStockOrdersSZStream"])==false
    
@testing:case="function_subscribeNsq_orders_shsz_givenName"
    iniNsqEnv(["myNsqOrdersSHStream", "myNsqOrdersSZStream"])
    streamTableNames = subscribeNsq(configFilePath, "orders", ["sh","sz"], streamTableNames=["myNsqOrdersSHStream", "myNsqOrdersSZStream"])
    assert 1, eqObj(streamTableNames, ["myNsqOrdersSHStream", "myNsqOrdersSZStream"])
    assert 2, all(existsSharedAndPersistStreamTable, ["myNsqOrdersSHStream", "myNsqOrdersSZStream"])
    assert 3, all(checkNsqSubscription{"orders"},["sh", "sz"])
    
    nsq::unsubscribe("orders", "sh")
    nsq::unsubscribe("orders", "sz")
    assert 3, any(checkNsqSubscription{"orders"},["sh", "sz"])==false
    iniNsqEnv(["myNsqOrdersSHStream", "myNsqOrdersSZStream"])
    assert 4, any(existsSharedAndPersistStreamTable, ["myNsqOrdersSHStream", "myNsqOrdersSZStream"])==false


@testing:case="function_subscribeNsq_orders_shsz_saveDFS_defaultName"
    iniNsqEnv()
    iniNsqDfs()
    streamTableNames, dbPath, tableNames = subscribeNsq(configFilePath, "orders", ["sh","sz"], saveToDfs=true)
    assert 1, eqObj(streamTableNames, ["nsqStockOrdersSHStream", "nsqStockOrdersSZStream"])
    assert 2, eqObj(dbPath, "dfs://nsqStockOrders")
    assert 3, eqObj(tableNames, ["ordersSH", "ordersSZ"])
    assert 4, all(existsSharedAndPersistStreamTable, ["nsqStockOrdersSHStream", "nsqStockOrdersSZStream"])
    assert 5, all(existsTable{"dfs://nsqStockOrders"}, ["ordersSH", "ordersSZ"])
    assert 6, all(checkNsqSubscription{"orders"}, ["sh", "sz"])
    assert 7, all(isSubscribedByDfs, ["nsqStockOrdersSHStream", "nsqStockOrdersSZStream"])
    
    nsq::unsubscribe("orders", "sh")
    nsq::unsubscribe("orders", "sz")
    assert 8, any(checkNsqSubscription{"orders"},["sh", "sz"])==false
    iniNsqEnv()
    assert 9, any(existsSharedAndPersistStreamTable, ["nsqStockOrdersSHStream", "nsqStockOrdersSZStream"])==false
    iniNsqDfs()
    assert 10, any(existsTable{"dfs://nsqStockOrders"}, ["ordersSH", "ordersSZ"])==false

@testing:case="function_subscribeNsq_orders_shsz_saveDFS_givenName"
    iniNsqEnv()
    iniNsqDfs("dfs://myNsqOrders", "myNsqOrdersSH")
    iniNsqDfs("dfs://myNsqOrders", "myNsqOrdersSZ")
    streamTableNames, dbPath, tableNames = subscribeNsq(configFilePath, "orders", ["sh","sz"], saveToDfs=true, dbPath="dfs://myNsqOrders", tableNames=["myNsqOrdersSH", "myNsqOrdersSZ"])
    assert 1, eqObj(streamTableNames, ["nsqStockOrdersSHStream", "nsqStockOrdersSZStream"])
    assert 2, eqObj(dbPath, "dfs://myNsqOrders")
    assert 3, eqObj(tableNames, ["myNsqOrdersSH", "myNsqOrdersSZ"])
    assert 4, all(existsSharedAndPersistStreamTable, ["nsqStockOrdersSHStream", "nsqStockOrdersSZStream"])
    assert 5, all(existsTable{"dfs://myNsqOrders"}, ["myNsqOrdersSH", "myNsqOrdersSZ"])
    assert 6, all(checkNsqSubscription{"orders"}, ["sh", "sz"])
    assert 7, all(isSubscribedByDfs, ["nsqStockOrdersSHStream", "nsqStockOrdersSZStream"])
    
    nsq::unsubscribe("orders", "sh")
    nsq::unsubscribe("orders", "sz")
    assert 8, any(checkNsqSubscription{"orders"},["sh", "sz"])==false
    iniNsqEnv()
    assert 9, any(existsSharedAndPersistStreamTable, ["nsqStockOrdersSHStream", "nsqStockOrdersSZStream"])==false
    iniNsqDfs("dfs://myNsqOrders", "myNsqOrdersSH")
    iniNsqDfs("dfs://myNsqOrders", "myNsqOrdersSZ")
    assert 10, any(existsTable{"dfs://myNsqOrders"}, ["myNsqOrdersSH", "myNsqOrdersSZ"])==false
    
    
// 同时订阅上交所和深交所逐笔委托行情数据测试（合并存储）
@testing:case="function_subscribeNsq_orders_merge_defaultName"
    iniNsqEnv()
    streamTableNames = subscribeNsq(configFilePath, "orders", ["sh","sz"], merge=true)
    assert 1, eqObj(streamTableNames, ["nsqStockOrdersStream"])
    assert 2, existsSharedAndPersistStreamTable("nsqStockOrdersStream")
    assert 3, all(checkNsqSubscription{"orders"},["sh", "sz"])
    
    nsq::unsubscribe("orders", "sh")
    nsq::unsubscribe("orders", "sz")
    assert 3, any(checkNsqSubscription{"orders"},["sh", "sz"])==false
    iniNsqEnv()
    assert 4, existsSharedAndPersistStreamTable("nsqStockOrdersStream")==false
    
@testing:case="function_subscribeNsq_orders_merge_givenName"
    iniNsqEnv("myNsqOrdersStream")
    streamTableNames = subscribeNsq(configFilePath, "orders", ["sh","sz"], merge=true, streamTableNames="myNsqOrdersStream")
    assert 1, eqObj(streamTableNames, ["myNsqOrdersStream"])
    assert 2, existsSharedAndPersistStreamTable("myNsqOrdersStream")
    assert 3, all(checkNsqSubscription{"orders"},["sh", "sz"])
    
    nsq::unsubscribe("orders", "sh")
    nsq::unsubscribe("orders", "sz")
    assert 3, any(checkNsqSubscription{"orders"},["sh", "sz"])==false
    iniNsqEnv("myNsqOrdersStream")
    assert 4, existsSharedAndPersistStreamTable("myNsqOrdersStream")==false

@testing:case="function_subscribeNsq_orders_merge_saveDFS_defaultName"
    iniNsqEnv()
    iniNsqDfs()
    streamTableNames, dbPath, tableNames = subscribeNsq(configFilePath, "orders", ["sh","sz"], merge=true, saveToDfs=true)
    assert 1, eqObj(streamTableNames, ["nsqStockOrdersStream"])
    assert 2, eqObj(dbPath, "dfs://nsqStockOrders")
    assert 3, eqObj(tableNames, ["orders"])
    assert 4, existsSharedAndPersistStreamTable("nsqStockOrdersStream")
    assert 5, existsTable("dfs://nsqStockOrders", "orders")
    assert 6, all(checkNsqSubscription{"orders"},["sh", "sz"])
    assert 7, isSubscribedByDfs("nsqStockOrdersStream")
    
    nsq::unsubscribe("orders", "sh")
    nsq::unsubscribe("orders", "sz")
    assert 8, any(checkNsqSubscription{"orders"},["sh", "sz"])==false
    iniNsqEnv()
    assert 9, existsSharedAndPersistStreamTable("nsqStockOrdersStream")==false
    iniNsqDfs()
    assert 10, existsTable("dfs://nsqStockOrders", "orders")==false


@testing:case="function_subscribeNsq_orders_merge_saveDFS_givenName"
    iniNsqEnv()
    iniNsqDfs("dfs://myNsqOrders", "myNsqOrders")
    streamTableNames, dbPath, tableNames = subscribeNsq(configFilePath, "orders", ["sh","sz"], merge=true, saveToDfs=true, dbPath="dfs://myNsqOrders", tableNames="myNsqOrders")
    assert 1, eqObj(streamTableNames,["nsqStockOrdersStream"])
    assert 2, eqObj(dbPath, "dfs://myNsqOrders")
    assert 3, eqObj(tableNames, ["myNsqOrders"])
    assert 4, existsSharedAndPersistStreamTable("nsqStockOrdersStream")
    assert 5, existsTable("dfs://myNsqOrders", "myNsqOrders")
    assert 6, all(checkNsqSubscription{"orders"},["sh", "sz"])
    assert 7, isSubscribedByDfs("nsqStockOrdersStream")
    
    nsq::unsubscribe("orders", "sh")
    nsq::unsubscribe("orders", "sz")
    assert 8, any(checkNsqSubscription{"orders"},["sh", "sz"])==false
    iniNsqEnv()
    assert 9, existsSharedAndPersistStreamTable("nsqStockOrdersStream")==false
    iniNsqDfs("dfs://myNsqOrders", "myNsqOrders")
    assert 10, existsTable("dfs://myNsqOrders", "myNsqOrders")==false
    

closeNsqConnection()
assert any(exec isConnected from nsq::getSubscriptionStatus())==false
